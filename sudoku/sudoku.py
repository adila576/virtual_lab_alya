# -*- coding: utf-8 -*-
"""sudoku.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1cpi5q3dSHdUtay_v4_2J7tg3Ad8T0gCV
"""

import streamlit as st
import numpy as np

# Konfigurasi halaman
st.set_page_config(page_title="Game Sudoku", page_icon="🧩", layout="centered")

st.title("🧩 Game Sudoku dengan Confetti")

# Fungsi validasi angka
def is_valid(board, row, col, num):
    for i in range(9):
        if board[row][i] == num or board[i][col] == num:
            return False
    start_row, start_col = 3 * (row // 3), 3 * (col // 3)
    for i in range(3):
        for j in range(3):
            if board[start_row + i][start_col + j] == num:
                return False
    return True

# Fungsi untuk menyelesaikan sudoku dengan backtracking
def solve(board):
    for i in range(9):
        for j in range(9):
            if board[i][j] == 0:
                for num in range(1, 10):
                    if is_valid(board, i, j, num):
                        board[i][j] = num
                        if solve(board):
                            return board
                        board[i][j] = 0
                return False
    return board

# Fungsi untuk membuat puzzle sudoku dasar
def generate_sudoku():
    puzzle = np.array([
        [5, 3, 0, 0, 7, 0, 0, 0, 0],
        [6, 0, 0, 1, 9, 5, 0, 0, 0],
        [0, 9, 8, 0, 0, 0, 0, 6, 0],
        [8, 0, 0, 0, 6, 0, 0, 0, 3],
        [4, 0, 0, 8, 0, 3, 0, 0, 1],
        [7, 0, 0, 0, 2, 0, 0, 0, 6],
        [0, 6, 0, 0, 0, 0, 2, 8, 0],
        [0, 0, 0, 4, 1, 9, 0, 0, 5],
        [0, 0, 0, 0, 8, 0, 0, 7, 9]
    ])
    solution = solve(puzzle.copy())
    return puzzle, solution

# Inisialisasi state
if 'puzzle' not in st.session_state:
    st.session_state.puzzle, st.session_state.solution = generate_sudoku()
    st.session_state.inputs = [["" for _ in range(9)] for _ in range(9)]
    st.session_state.won = False

# Render board
def draw_board():
    puzzle = st.session_state.puzzle
    inputs = st.session_state.inputs
    for i in range(9):
        cols = st.columns(9)
        for j in range(9):
            if puzzle[i][j] != 0:
                cols[j].markdown(
                    f"<div style='text-align:center; padding:8px; background-color:#eee; border-radius:6px;'>{puzzle[i][j]}</div>",
                    unsafe_allow_html=True
                )
            else:
                val = cols[j].text_input("", value=inputs[i][j], key=f"cell_{i}_{j}", max_chars=1)
                if val.isdigit() and 1 <= int(val) <= 9:
                    st.session_state.inputs[i][j] = val
                else:
                    st.session_state.inputs[i][j] = ""

# Cek apakah jawaban benar
def check_win():
    for i in range(9):
        for j in range(9):
            if st.session_state.puzzle[i][j] == 0:
                try:
                    if int(st.session_state.inputs[i][j]) != st.session_state.solution[i][j]:
                        return False
                except:
                    return False
    return True

# Gambar papan
draw_board()

# Tombol cek jawaban
if st.button("✅ Cek Jawaban"):
    if check_win():
        st.success("🎉 Selamat! Kamu menang!")
        st.balloons()  # Confetti animasi
        st.session_state.won = True
    else:
        st.error("❌ Masih salah, coba lagi.")

# Tombol reset
if st.button("🔁 Main Ulang"):
    st.session_state.puzzle, st.session_state.solution = generate_sudoku()
    st.session_state.inputs = [["" for _ in range(9)] for _ in range(9)]
    st.session_state.won = False
    st.experimental_rerun()
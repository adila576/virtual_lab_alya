# -*- coding: utf-8 -*-
"""mineswiper.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1em6YEhTk1ya9ZaBlEuAQo_izHw9CVbXe
"""

import streamlit as st
import numpy as np
import random
from streamlit_extras.let_it_rain import rain

st.set_page_config(page_title="🎯 Minesweeper", layout="centered")

# ------------------ GAME SETUP ------------------
GRID_SIZE = 6
NUM_MINES = 6

@st.cache_resource
def generate_board():
    board = np.zeros((GRID_SIZE, GRID_SIZE), dtype=int)
    mines = random.sample(range(GRID_SIZE * GRID_SIZE), NUM_MINES)
    for mine in mines:
        x, y = divmod(mine, GRID_SIZE)
        board[x][y] = -1
        # Update neighbors
        for i in range(x - 1, x + 2):
            for j in range(y - 1, y + 2):
                if 0 <= i < GRID_SIZE and 0 <= j < GRID_SIZE and board[i][j] != -1:
                    board[i][j] += 1
    return board

if 'board' not in st.session_state:
    st.session_state.board = generate_board()
    st.session_state.revealed = np.full((GRID_SIZE, GRID_SIZE), False)
    st.session_state.game_over = False
    st.session_state.won = False

def reveal_cell(x, y):
    if st.session_state.revealed[x][y] or st.session_state.game_over:
        return
    st.session_state.revealed[x][y] = True
    if st.session_state.board[x][y] == -1:
        st.session_state.game_over = True
    elif st.session_state.board[x][y] == 0:
        # Recursively reveal neighbors
        for i in range(x - 1, x + 2):
            for j in range(y - 1, y + 2):
                if 0 <= i < GRID_SIZE and 0 <= j < GRID_SIZE:
                    reveal_cell(i, j)

def check_win():
    for i in range(GRID_SIZE):
        for j in range(GRID_SIZE):
            if st.session_state.board[i][j] != -1 and not st.session_state.revealed[i][j]:
                return False
    return True

# ------------------ UI ------------------
st.title("💣 Colorful Minesweeper")
st.caption("Klik pada kotak untuk bermain. Hindari bom!")

if st.button("🔁 Mulai Ulang"):
    st.session_state.clear()
    st.experimental_rerun()

# Grid
for i in range(GRID_SIZE):
    cols = st.columns(GRID_SIZE)
    for j in range(GRID_SIZE):
        if st.session_state.revealed[i][j]:
            val = st.session_state.board[i][j]
            if val == -1:
                cols[j].markdown(f'<div style="background:#ff4d4d;border-radius:5px;padding:10px;text-align:center;color:white;">💣</div>', unsafe_allow_html=True)
            elif val == 0:
                cols[j].markdown(f'<div style="background:#d9d9d9;border-radius:5px;padding:10px;"></div>', unsafe_allow_html=True)
            else:
                color = ["blue", "green", "red", "purple", "maroon", "orange"][val % 6]
                cols[j].markdown(f'<div style="background:#e6f2ff;border-radius:5px;padding:10px;text-align:center;"><span style="color:{color};font-weight:bold;">{val}</span></div>', unsafe_allow_html=True)
        else:
            if cols[j].button(" ", key=f"{i}-{j}"):
                reveal_cell(i, j)
                if check_win():
                    st.session_state.won = True
                    st.session_state.game_over = True

# ------------------ GAME ENDING ------------------
if st.session_state.game_over:
    if st.session_state.won:
        st.success("🎉 Selamat! Anda Menang!")
        rain(
            emoji="🎈",
            font_size=30,
            falling_speed=5,
            animation_length="infinite",
        )
    else:
        st.error("💥 Game Over! Anda kena bom.")
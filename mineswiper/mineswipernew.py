# -*- coding: utf-8 -*-
"""mineswipernew.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1cpi5q3dSHdUtay_v4_2J7tg3Ad8T0gCV
"""

import streamlit as st
import numpy as np
import random

st.set_page_config(page_title="Minesweeper Game", page_icon="💣", layout="centered")

st.title("💣 Minesweeper Sederhana")

# Konfigurasi permainan
ROWS = 5
COLS = 5
NUM_MINES = 5

# Inisialisasi board dan state
def init_game():
    board = np.zeros((ROWS, COLS), dtype=int)
    mines = set()
    while len(mines) < NUM_MINES:
        r, c = random.randint(0, ROWS-1), random.randint(0, COLS-1)
        mines.add((r, c))
    for r, c in mines:
        board[r][c] = -1  # -1 = bom

    # Hitung angka di sekitar
    for r in range(ROWS):
        for c in range(COLS):
            if board[r][c] == -1:
                continue
            count = 0
            for i in range(-1, 2):
                for j in range(-1, 2):
                    nr, nc = r + i, c + j
                    if 0 <= nr < ROWS and 0 <= nc < COLS and board[nr][nc] == -1:
                        count += 1
            board[r][c] = count
    return board, set(), False, False  # board, revealed, game_over, win

# Setup session state
if "board" not in st.session_state:
    st.session_state.board, st.session_state.revealed, st.session_state.game_over, st.session_state.win = init_game()

# Fungsi untuk membuka sel
def reveal_cell(r, c):
    if st.session_state.game_over or (r, c) in st.session_state.revealed:
        return
    st.session_state.revealed.add((r, c))
    if st.session_state.board[r][c] == -1:
        st.session_state.game_over = True
    elif st.session_state.board[r][c] == 0:
        # buka tetangga jika 0
        for i in range(-1, 2):
            for j in range(-1, 2):
                nr, nc = r + i, c + j
                if 0 <= nr < ROWS and 0 <= nc < COLS:
                    reveal_cell(nr, nc)

# Fungsi cek menang
def check_win():
    total_cells = ROWS * COLS
    if len(st.session_state.revealed) == total_cells - NUM_MINES:
        st.session_state.win = True
        st.session_state.game_over = True

# Render papan
for r in range(ROWS):
    cols = st.columns(COLS)
    for c in range(COLS):
        key = f"{r}_{c}"
        if (r, c) in st.session_state.revealed:
            val = st.session_state.board[r][c]
            if val == -1:
                cols[c].button("💣", disabled=True, key=key)
            elif val == 0:
                cols[c].button(" ", disabled=True, key=key)
            else:
                cols[c].button(str(val), disabled=True, key=key)
        else:
            if cols[c].button(" ", key=key):
                reveal_cell(r, c)
                check_win()

# Info status
if st.session_state.game_over:
    if st.session_state.win:
        st.success("🎉 Selamat! Kamu menang!")
        st.balloons()
    else:
        st.error("💥 Game Over! Kamu kena bom!")

# Reset game
if st.button("🔁 Main Ulang"):
    st.session_state.board, st.session_state.revealed, st.session_state.game_over, st.session_state.win = init_game()
    st.experimental_rerun()